# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from Graph import nodes
from tokens import check_expression,add_spaces,check_string
from main2 import par,par2,editNodes,editInput
from PyQt5 import QtCore, QtGui, QtWidgets, QtWebEngineWidgets
from second import Ui_SecondWindow
from DFA import Ui_DFAWindow
from pyvis.network import Network
from AST import AST
net = Network('810px', '740px',directed=False)
net2 = Network('810px', '670px',layout="hierarchical")
net.add_node("i", hidden=False, title="j", color="blue", x=300,y=30)
open('x.html', 'w').close()


class Ui_MainWindow(object):
    file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "x.html"))
    local_url = QtCore.QUrl.fromLocalFile(file_path)
    file_path2 = os.path.abspath(os.path.join(os.path.dirname(__file__), "x2.html"))
    local_url2 = QtCore.QUrl.fromLocalFile(file_path2)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1000)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("parser.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.EnteredString = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.EnteredString.setGeometry(QtCore.QRect(660, 0, 611, 101))
        self.EnteredString.setObjectName("EnteredString")
        self.evaluateButton = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.matplotCanvas())
        self.evaluateButton.setGeometry(QtCore.QRect(1330, 10, 161, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.evaluateButton.setFont(font)
        self.evaluateButton.setObjectName("evaluateButton")
        self.parseTreeButton = QtWidgets.QPushButton(self.centralwidget,clicked=lambda :self.drawParseTree())
        self.parseTreeButton.setGeometry(QtCore.QRect(1540, 10, 161, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.parseTreeButton.setFont(font)
        self.parseTreeButton.setObjectName("parseTreeButton")
        self.newButton = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.clearOutputText())
        self.newButton.setGeometry(QtCore.QRect(450, 10, 161, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.newButton.setFont(font)
        self.newButton.setObjectName("newButton")
        self.abstractButton = QtWidgets.QPushButton(self.centralwidget,clicked=lambda :self.drawAbstractTree())
        self.abstractButton.setGeometry(QtCore.QRect(1740, 10, 161, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.abstractButton.setFont(font)
        self.abstractButton.setObjectName("abstractButton")
        self.stepsButton = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openSecondWindow())
        self.stepsButton.setGeometry(QtCore.QRect(240, 10, 161, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.stepsButton.setFont(font)
        self.stepsButton.setObjectName("stepsButton")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(20, 130, 421, 831))
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 398, 40018))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Output = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(100)
        sizePolicy.setHeightForWidth(self.Output.sizePolicy().hasHeightForWidth())
        self.Output.setSizePolicy(sizePolicy)
        self.Output.setMinimumSize(QtCore.QSize(0, 40000))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.Output.setFont(font)
        self.Output.setText("")
        self.Output.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.Output.setObjectName("Output")
        self.horizontalLayout.addWidget(self.Output)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.dfaButton = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openDFAWindow())
        self.dfaButton.setGeometry(QtCore.QRect(30, 10, 161, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.dfaButton.setFont(font)
        self.dfaButton.setObjectName("dfaButton")
        self.centralwidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.centralwidget_2.setGeometry(QtCore.QRect(460, 130, 750, 821))
        self.centralwidget_2.setObjectName("centralwidget_2")
        self.centralwidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.centralwidget_3.setGeometry(QtCore.QRect(1220, 130, 680, 821))
        self.centralwidget_3.setObjectName("centralwidget_3")
        self.webEngineView = QtWebEngineWidgets.QWebEngineView(self.centralwidget_2)
        self.webEngineView.load(self.local_url)
        self.webEngineView.setGeometry(0, 0, 750, 820)
        self.webEngineView2 = QtWebEngineWidgets.QWebEngineView(self.centralwidget_3)
        self.webEngineView2.load(self.local_url2)
        self.webEngineView2.setGeometry(0, 0, 680, 820)
        self.scrollArea.raise_()
        self.EnteredString.raise_()
        self.evaluateButton.raise_()
        self.parseTreeButton.raise_()
        self.newButton.raise_()
        self.abstractButton.raise_()
        self.stepsButton.raise_()
        self.dfaButton.raise_()
        self.centralwidget_2.raise_()
        self.centralwidget_3.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1920, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    outputString = ""
    #open('x.html', 'w').close()
    nodes.clear()
    net.edges.clear()
    net.nodes.clear()
    net.node_map.clear()
    net.node_ids.clear()
    net.write_html("x.html")
    net2.edges.clear()
    net2.nodes.clear()
    net2.node_map.clear()
    net2.node_ids.clear()
    net2.write_html("x2.html")
    file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "x.html"))
    local_url = QtCore.QUrl.fromLocalFile(file_path)
    file_path2 = os.path.abspath(os.path.join(os.path.dirname(__file__), "x2.html"))
    local_url2 = QtCore.QUrl.fromLocalFile(file_path2)
    def drawParseTree(self):
        nodes.clear()
        net2.edges.clear()
        net2.nodes.clear()
        net2.node_map.clear()
        net2.node_ids.clear()
        net2.write_html("x2.html")
        file_path2 = os.path.abspath(os.path.join(os.path.dirname(__file__), "x2.html"))
        local_url2 = QtCore.QUrl.fromLocalFile(file_path2)
        self.webEngineView2.load(self.local_url2)
        x = self.EnteredString.toPlainText()
        x = add_spaces(x, [])
        y=x
        l = []
        tken2 = []
        check_expression(x, l, tken2)
        if tken2[0]!="error":
         b=par2(tken2)
         print("---------------------")
         print("---------------------")
         print(b)
         if not b:
             self.setOutputText("Error parsing2")
             return
         tken2 = []
         l=[]
         z=y
         check_expression(y, l, tken2)
         for t in tken2:
             print(t)
         par(tken2)
         #editInput(z)
         print("---------------------")
         print("---------------------")
         for i in nodes:
             print(i.name)
         print("---------------------")
         print("---------------------")
         for i in nodes:
             net2.add_node(n_id=str(i.id),label=str(i.name),level=int(i.level),color=str(i.c))
         net2.write_html("x2.html")
         print("5")
         for i in nodes:
             if i.parent==None:
                 continue
             net2.add_edge(str(i.parent.id),str(i.id))
         print("6")
         net2.write_html("x2.html")
         file_path2 = os.path.abspath(os.path.join(os.path.dirname(__file__), "x2.html"))
         local_url2 = QtCore.QUrl.fromLocalFile(file_path2)
         self.webEngineView2.load(self.local_url2)
        else:
            self.setOutputText("Error parsing")
    def drawAbstractTree(self):
        #net.edges.clear()
        #net.nodes.clear()
        #net.node_map.clear()
        #net.node_ids.clear()
        #net.write_html("x.html")
        file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "x.html"))
        local_url = QtCore.QUrl.fromLocalFile(file_path)
        self.webEngineView.load(self.local_url)
        x = self.EnteredString.toPlainText()
        x = add_spaces(x, [])
        xlist = []
        xString=""
        flag=False
        print("preee")
        for i in x:
            print("preee22")
            if str(i) != " ":
                print("2pre")
                if str(i) !="+" and str(i) !="-" and str(i) !="*" and str(i) !="/" and flag==False:
                    print("1111preee")
                    flag=True
                    xString=""
                    xString=xString+str(i)
                    print("1111preee")
                elif str(i) !="+" and str(i) !="-" and str(i) !="*" and str(i) !="/" and flag==True:
                    print("222222preee")
                    xString = xString + str(i)
                    print("222222preee")
                elif flag==True:
                    print("3333preee")
                    xlist.append(xString)
                    xString=""
                    flag=False
                    xlist.append(str(i))
                    print("3333preee")
                elif flag==False:
                    print("44444preee")
                    xlist.append(str(i))
                    print("44444preee")
        if flag==True:
            xlist.append(xString)
        print("preeegfff")
        print("xxxxx",xlist)

        l = []
        tken2 = []
        check_expression(x, l, tken2)
        editInput(x)
        if tken2[0] != "error":
            par(tken2)
            print("1")
            AST(xlist, "x.html")
            #net.write_html("x.html")
            print("55")
            print("6")
            #net.write_html("x.html")
            file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "x.html"))
            local_url = QtCore.QUrl.fromLocalFile(file_path)
            self.webEngineView.load(self.local_url)
        else:
            self.setOutputText("Error parsing")
    def openSecondWindow(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_SecondWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def openDFAWindow(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_DFAWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def clearOutputText(self):
        self.Output.setText("")
        self.outputString = ""
        nodes.clear()
        net2.edges.clear()
        net2.nodes.clear()
        net2.node_map.clear()
        net2.node_ids.clear()
        net2.write_html("x2.html")

    def setOutputText(self, text):
        self.outputString = self.outputString + text + "\n"
        self.Output.setText(self.outputString)

    def check_string(state, char):
        match state:
            case '1':
                if (char == "ID" or char == '(' or char == ')'):
                    state = '2'

                    return state
                elif (char == "Num"):
                    state = '3'

                    return state
                elif (char in '+-*/'):
                    state = 'error'

                    return state
                elif (char.isspace()):
                    state = '1'
                    return state
                else:
                    state = 'error'

                    return state
            case '2':
                if (char == "ID" or char == '(' or char == ')'):
                    state = 'error'

                    return state
                elif (char == "Num"):
                    state = '2'

                    return state
                elif (char in '+-*/'):
                    state = '4'

                    return '4'
                elif (char.isspace()):
                    state = '2'
                    return state
                else:
                    state = 'error'

                    return state
            case '3':
                if (char == "ID" or char == '(' or char == ')'):
                    state = 'error'

                    return state
                elif (char == "Num"):
                    state = 'error'

                    return state
                elif (char in '+-*/'):
                    state = '4'

                    return state
                elif (char.isspace()):
                    state = '3'
                    return state
                else:
                    state = 'error'

                    return state
            case '4':
                if (char == "ID" or char == '(' or char == ')'):
                    state = '5'

                    return state
                elif (char == "Num"):
                    state = '6'

                    return '6'
                elif (char in '+-*/'):
                    state = 'error'

                    return state
                elif (char.isspace()):
                    state = '4'
                    return state
                else:
                    state = 'error'

                    return state
            case '5':
                if (char == "ID" or char == '(' or char == ')'):
                    state = 'error'

                    return state
                elif (char == "Num"):
                    state = 'error'

                    return state
                elif (char in '+-*/'):
                    state = '4'

                    return state
                elif (char.isspace()):
                    state = '5'
                    return state
                else:
                    state = 'error'

                    return state
            case '6':
                if (char == "ID" or char == '(' or char == ')'):
                    state = 'error'

                    return state
                elif (char == "Num"):
                    state = 'error'

                    return state
                elif (char in '+-*/'):
                    state = '4'

                    return state
                elif (char.isspace()):
                    state = '6'
                    return state
                else:
                    state = 'error'

                    return state
            case 'error':
                state = 'error'
                return 'error'

    def check_expression(letter, l, toks):
        state = '1'
        st = letter.split()

        for word in st:
            if (word[0].isalpha()):
                l.append(str('< ' + word + ' , ' + 'ID >'))
                toks.append('ID')
            elif (word == '('):
                l.append(str('< ' + word + ' , ' + '"(" >'))
                toks.append('(')
            elif (word == ')'):
                l.append(str('< ' + word + ' , ' + '")" >'))
                toks.append(")")
            elif (word.isnumeric()):
                l.append(str('< ' + word + ' , ' + 'Num >'))
                toks.append("Num")
            elif (word[0] == '+'):
                l.append(str('< ' + word + ' , ' + 'operator >'))
                toks.append('+')
            elif (word[0] == '*'):
                l.append(str('< ' + word + ' , ' + 'operator >'))
                toks.append('*')
            elif (word[0] == '-'):
                l.append(str('< ' + word + ' , ' + 'operator >'))
                toks.append('-')
            elif (word[0] == '/'):
                l.append(str('< ' + word + ' , ' + 'operator >'))
                toks.append('/')
            else:
                toks.clear()
                toks.append("error")
                l.append(str('< ' + word + ' , ' + 'error >'))
                break
        for i in (toks):
            state = check_string(state, i)
        if (state == "6") and not (state == "5") or state == 'error':
            toks.clear()
            toks.append("error")
            l.clear()
            l.append("error")
        toks.append("$")

    def add_spaces(letter, y):
        for i in letter:
            if i == "+" or i == "-" or i == "*" or i == "/":
                y.append(" ")
                y.append(i)
                y.append(" ")
            else:
                y.append(i)
        letter = ""
        for j in y:
            letter = letter + j
        return letter


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Parser"))
        self.evaluateButton.setText(_translate("MainWindow", "Evaluate"))
        self.parseTreeButton.setText(_translate("MainWindow", "Parse Tree"))
        self.newButton.setText(_translate("MainWindow", "New"))
        self.abstractButton.setText(_translate("MainWindow", "Abstract"))
        self.stepsButton.setText(_translate("MainWindow", "Steps"))
        self.dfaButton.setText(_translate("MainWindow", "DFA"))

    # Function to plot graph and check string entered
    def matplotCanvas(self):
        x = self.EnteredString.toPlainText()
        x=add_spaces(x,[])
        l=[]
        tken2=[]
        check_expression(x,l,tken2)
        for i in l :
         self.setOutputText(i)
        if tken2[0]=="error":
            self.setOutputText("This string is invalid; please enter a valid string")
        print('----------------------------------------')
        self.setOutputText('----------------------------------------')

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
